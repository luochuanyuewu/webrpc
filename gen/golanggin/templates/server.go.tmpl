{{define "server"}}
{{if .Services}}
//
// Server
//

type WebRPCServer interface {
  //http.Handler
  ServeGin(ctx *gin.Context)
}

{{- range .Services}}
  {{$name := .Name}}
  {{$serviceName := .Name | serverServiceName}}

  type {{$serviceName}} struct {
    {{.Name}}
  }

  func {{ .Name | newServerServiceName }}(svc {{.Name}}) WebRPCServer {
    return &{{$serviceName}}{
      {{.Name}}: svc,
    }
  }

  func (s *{{$serviceName}}) ServeGin(ctx *gin.Context) {
    ctx.Set(HTTPResponseWriterCtxKey.name, ctx.Writer)
    ctx.Set(HTTPRequestCtxKey.name, ctx.Request)
    ctx.Set(ServiceNameCtxKey.name, "{{.Name}}")

    if ctx.Request.Method != "POST" {
    err := Errorf(ErrBadRoute, "unsupported method %q (only POST is allowed)", ctx.Request.Method)
    RespondWithError(ctx, err)
    return
    }

    switch ctx.Request.URL.Path {
    {{- range .Methods}}
      case "/rpc/{{$name}}/{{.Name}}":
      s.{{.Name | serviceMethodName}}(ctx)
      return
    {{- end}}
    default:
    err := Errorf(ErrBadRoute, "no handler for path %q", ctx.Request.URL.Path)
    RespondWithError(ctx, err)
    return
    }
  }


  {{range .Methods}}
    func (s *{{$serviceName}}) {{.Name | serviceMethodName}}(ctx *gin.Context) {
      header := ctx.GetHeader("Content-Type")
      i := strings.Index(header, ";")
      if i == -1 {
        i = len(header)
      }

      switch strings.TrimSpace(strings.ToLower(header[:i])) {
      case "application/json":
        s.{{ .Name | serviceMethodJSONName }}(ctx)
      default:
        err := Errorf(ErrBadRoute, "unexpected Content-Type: %q", ctx.GetHeader("Content-Type"))
        RespondWithError(ctx, err)
      }
    }

    func (s *{{$serviceName}}) {{.Name | serviceMethodJSONName}}(ctx *gin.Context) {
      var err error
      ctx.Set(MethodNameCtxKey.name, "{{.Name}}")

      {{- if .Inputs|len}}
      reqContent := struct {
      {{- range $i, $input := .Inputs}}
        Arg{{$i}} {{. | methodArgType}} `json:"{{$input.Name | downcaseName}}"`
      {{- end}}
      }{}

      if err := ctx.ShouldBindJSON(&reqContent); err != nil {
        err = WrapError(ErrInternal, err, "failed to unmarshal request data")
        RespondWithError(ctx, err)
        return
      }

      {{- end}}

      // Call service method
      {{- range $i, $output := .Outputs}}
      var ret{{$i}} {{$output | methodArgType}}
      {{- end}}
      func() {
        defer func() {
          // In case of a panic, serve a 500 error and then panic.
          if rr := recover(); rr != nil {
            RespondWithError(ctx, ErrorInternal("internal service panic"))
            panic(rr)
          }
        }()
        {{argsList .Outputs "ret"}}{{.Outputs | commaIfLen}} err = s.{{$name}}.{{.Name}}(ctx{{.Inputs | commaIfLen}}{{argsList .Inputs "reqContent.Arg"}})
      }()
      {{- if .Outputs | len}}
      respContent := struct {
      {{- range $i, $output := .Outputs}}
        Ret{{$i}} {{$output | methodArgType}} `json:"{{$output.Name | downcaseName}}"`
      {{- end}}         
      }{ {{argsList .Outputs "ret"}} }
      {{- end}}

      if err != nil {
        RespondWithError(ctx, err)
        return
      }

      //w.Header().Set("Content-Type", "application/json")
      //w.WriteHeader(http.StatusOK)

      {{- if .Outputs | len}}
        ctx.JSON(http.StatusOK, respContent)
      {{- end}}
    }
  {{end}}
{{- end}}

func RespondWithError(ctx *gin.Context, err error) {
    rpcErr, ok := err.(Error)
    if !ok {
    rpcErr = WrapError(ErrInternal, err, "webrpc error")
    }

    statusCode := HTTPStatusFromErrorCode(rpcErr.Code())

    ctx.JSON(statusCode, rpcErr.Payload())
}

{{end}}
{{end}}
