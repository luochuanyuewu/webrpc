{{define "client"}}
  {{- if .Services}}
//
// Client
//

{{- range .Services}}
export class {{.Name}} implements {{.Name | serviceInterfaceName}} {
  private axios: AxiosInstance
  private path = '/rpc/{{.Name}}/'

  constructor(axiosInstance: AxiosInstance) {
    this.axios = axiosInstance
  }

  private url(name: string): string {
    return this.path + name
  }
  {{range .Methods}}
    {{.Name | methodName}} = ({{. | methodInputs}}): {{. | methodOutputs}} => {
    return this.axios.post(
      this.url('{{.Name}}'),
      {{- if .Inputs | len}}
      createHTTPRequest(args)
      {{- else}}
      createHTTPRequest({})
      {{end -}},
      config
    ).then((res: AxiosResponse) => {
      return buildResponse(res).then(_data=>{
          return {
          {{- $outputsCount := .Outputs|len -}}
            {{- range $i, $output := .Outputs}}
              {{$output | newOutputArgResponse}}{{listComma $i $outputsCount}}
            {{- end}}
          }
      })
    })
  }
  {{end}}
}
{{end -}}
  {{end -}}
{{end}}