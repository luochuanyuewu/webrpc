{{define "client_helpers"}}
export interface WebRPCError extends Error {
  code: string
  msg: string
	status: number
}

const createHTTPRequest = (body: object = {}): string => {
  return JSON.stringify(body || {})
}

const buildResponseOld = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status } as WebRPCError
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}

const buildResponse = (res: AxiosResponse): Promise<any> => {
  return new Promise<any>(resolve => {
      let _data = res.data

      if (_data.status && _data.status > 200){
        if (_data.code === 'internal'){
          throw {code:_data.code,msg: _data.cause, status:_data.status} as WebRPCError
        }
        throw {code:_data.code, msg:_data.msg,status:_data.status} as WebRPCError
      }else
      {
        return resolve(_data)
      }
    },
  )
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
{{end}}
